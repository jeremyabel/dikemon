package com.tinyrpg {	import com.greensock.TweenLite;	import com.greensock.easing.SteppedEase;	import com.tinyrpg.core.TinyFieldMap;	import com.tinyrpg.core.TinyFriendSprite;	import com.tinyrpg.core.TinyPlayer;	import com.tinyrpg.core.TinyStatsEntity;	import com.tinyrpg.core.TinyView;	import com.tinyrpg.data.TinyAppSettings;	import com.tinyrpg.data.TinyEnemyDataList;	import com.tinyrpg.data.TinyEventFlagData;	import com.tinyrpg.data.TinyItemDataList;	import com.tinyrpg.data.TinyMoveDataList;	import com.tinyrpg.data.TinySaveData;	import com.tinyrpg.display.TinyIntroMovie;	import com.tinyrpg.display.misc.SlashGradient;	import com.tinyrpg.events.TinyGameEvent;	import com.tinyrpg.managers.TinyAudioManager;	import com.tinyrpg.managers.TinyFontManager;	import com.tinyrpg.managers.TinyInputManager;	import com.tinyrpg.misc.TinyCSS;	import com.tinyrpg.misc.TinyMapConfig;	import com.tinyrpg.ui.TinySaveLoadMenu;	import com.tinyrpg.ui.TinyTitleScreen;	import com.tinyrpg.utils.TinyLogManager;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.system.fscommand;	/**	 * @author jeremyabel	 */	public class TinyMain extends Sprite 	{		public var appSettings : TinyAppSettings;		public var enemyData   : TinyEnemyDataList;		public var itemData    : TinyItemDataList; 		public var moveData	   : TinyMoveDataList;		public var soundData   : TinyAudioManager;				private static var instance : TinyMain = new TinyMain();		private static var view		: TinyView;				private static const STARTING_PLAYER : String = 'Ralph';				//private var view		: TinyView;		private var fieldMap	: TinyFieldMap;		private var titleScreen : TinyTitleScreen;		private var introMovie	: TinyIntroMovie;		private var pixelGrad	: Bitmap;		private var player		: TinyPlayer;		private var loadedData  : XML;		private var loadMenu    : TinySaveLoadMenu;		private var blackOut	: Sprite;		public function TinyMain() : void		{			// Can't do anything until we have the stage			this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onAddedToStage(event : Event) : void		{			TinyLogManager.log('onAddedToStage', this);						// Initialize sound and wait for it to load			this.soundData = TinyAudioManager.getInstance();			this.soundData.addEventListener(Event.COMPLETE, this.continueInit);		}		private function continueInit(event : Event) : void 		{			// Initialize app settings						this.appSettings = new TinyAppSettings(stage);						// Initialize enemy sprites			this.enemyData = TinyEnemyDataList.getInstance();						// Initialize items			this.itemData = TinyItemDataList.getInstance();						// Initialize moves			this.moveData = TinyMoveDataList.getInstance();					// Set fullscreen			/*			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.stageWidth = stage.fullScreenWidth;			stage.stageHeight = stage.fullScreenHeight;			stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;						// Hide cursor			stage.nativeWindow.activate();			stage.nativeWindow.orderToBack();			stage.nativeWindow.orderToFront();			Mouse.hide();			*/						// Save scale factor			var scaleFactor : Number = stage.stageHeight / 240;			TinyAppSettings.SCALE_FACTOR = scaleFactor;						// Init font manager			TinyFontManager.initWithCSS(TinyCSS.cssString);						// Resize to fit the screen			TinyMain.view = new TinyView();			TinyMain.view.x = int(((stage.stageWidth) / 2) - (160 * (scaleFactor / 2)));			TinyMain.view.scaleX = scaleFactor;			TinyMain.view.scaleY = scaleFactor;						// Blackout sides			this.blackOut = new Sprite;			this.blackOut.graphics.beginFill(0xFF00FF);			this.blackOut.graphics.drawRect(-500, 0, 500, 500);			this.blackOut.graphics.endFill();						// Title screen			this.titleScreen = new TinyTitleScreen;						// Add 'em up			this.addChild(TinyMain.view);			this.addChild(this.blackOut);			TinyMain.view.addChild(this.titleScreen);						// Aaaand go!			this.titleScreen.show();			TinyInputManager.getInstance().setTarget(titleScreen);			this.titleScreen.addEventListener(TinyGameEvent.NEW_GAME, onNewGame);			this.titleScreen.addEventListener(TinyGameEvent.LOAD_GAME, onLoadGame);			this.titleScreen.addEventListener(TinyGameEvent.QUIT_GAME, onQuitGame);		}		private function onNewGame(event : TinyGameEvent) : void 		{			TinyLogManager.log('onNewGame', this);						// Disable input			TinyInputManager.getInstance().setTarget(null);						// Bring in slashy pixel gradient			this.pixelGrad = new Bitmap(new SlashGradient);			this.pixelGrad.x =			this.pixelGrad.y = -448;			TinyMain.view.addChild(this.pixelGrad);			TweenLite.to(this.pixelGrad, 15, { x:-84, y:-84, ease:SteppedEase.create(6), useFrames:true, onComplete:this.transitionOut, onCompleteParams:[false] });						TinyAudioManager.getInstance().stopMusic();						// Make map			this.fieldMap = TinyFieldMap.getInstance();			TinyMain.view.addChild(this.fieldMap);						// Add intro movie			this.introMovie = new TinyIntroMovie;			this.introMovie.x = 160;			this.introMovie.y = 160;			this.introMovie.addEventListener(Event.COMPLETE, onIntroMovieComplete);			TinyMain.view.addChild(this.introMovie);						// Clean up			this.titleScreen.removeEventListener(TinyGameEvent.NEW_GAME, onNewGame);			this.titleScreen.removeEventListener(TinyGameEvent.LOAD_GAME, onLoadGame);			this.titleScreen.removeEventListener(TinyGameEvent.QUIT_GAME, onQuitGame);		}		private function onIntroMovieComplete(event : Event) : void 		{			TinyLogManager.log('onIntroMovieComplete', this);						// Make starting player XML			var startingXML : XML = TinySaveData.getStartingSave(TinyMain.STARTING_PLAYER);						// Init event flags			TinyEventFlagData.getInstance().init();			// Create and init player			this.player = TinyPlayer.getInstance();			this.player.playerName = TinyMain.STARTING_PLAYER;			this.player.initFromXML(startingXML);						// Set player's position			var playerPos : Point = new Point;			var playerPosArray : Array = startingXML.child('MAP').child('PLAYER_POS').toString().split(',');			playerPos.x = int(playerPosArray[0]);			playerPos.y = int(playerPosArray[1]);						// Set recruited event flag			TinyEventFlagData.getRecruitFlagByName(TinyMain.STARTING_PLAYER).value = true;						// Make map from loaded data			this.fieldMap.setMap(TinyMapConfig.getMapFromName(startingXML.child('MAP').child('NAME').toString()), false, false);			this.fieldMap.addPlayerSpriteAt(playerPos.x, playerPos.y);						// Fade out intro movie			TweenLite.to(this.introMovie, 35, { alpha:0, ease:SteppedEase.create(5), useFrames:true, onComplete:onMapTransitionInComplete });		}				private function onMapTransitionInComplete() : void		{			TinyLogManager.log('onMapTransitionInComplete', this);						// Clean up			TinyMain.view.removeChild(this.introMovie);			this.introMovie.removeEventListener(Event.COMPLETE, onIntroMovieComplete);			this.introMovie = null;		}		private function onLoadGame(event : TinyGameEvent, startingSaveData : XML = null) : void		{			TinyLogManager.log('onLoadGame: Slot ' + event.loadSlot, this);						// Disable input			TinyInputManager.getInstance().setTarget(null);						// Load data (from slot or with given XML)			if (!startingSaveData) {				this.loadedData = TinySaveData.loadCompressedData(event.loadSlot);			} else {				this.loadedData = startingSaveData;			}			// Load event flag values			TinyEventFlagData.getInstance().init();			TinyEventFlagData.initFromXML(loadedData);						// Create and init player			this.player = TinyPlayer.getInstance();			this.player.initFromXML(loadedData);						// Get player's position			var playerPos : Point = new Point;			var playerPosArray : Array = loadedData.child('MAP').child('PLAYER_POS').toString().split(',');			playerPos.x = int(playerPosArray[0]);			playerPos.y = int(playerPosArray[1]);						// Make map from loaded data			this.fieldMap = TinyFieldMap.getInstance();			this.fieldMap.setMap(TinyMapConfig.getMapFromName(loadedData.child('MAP').child('NAME').toString()), true);			this.fieldMap.addPlayerSpriteAt(playerPos.x, playerPos.y);			this.fieldMap.visible = false;			TinyMain.view.addChild(this.fieldMap);						// Bring in slashy pixel gradient			this.pixelGrad = new Bitmap(new SlashGradient);			this.pixelGrad.x =			this.pixelGrad.y = -448;			TinyMain.view.addChild(this.pixelGrad);			TweenLite.to(this.pixelGrad, 15, { x:-84, y:-84, ease:SteppedEase.create(6), useFrames:true, onComplete:this.transitionOut, onCompleteParams:[true] });			// Clean up			this.titleScreen.removeEventListener(TinyGameEvent.NEW_GAME, onNewGame);			this.titleScreen.removeEventListener(TinyGameEvent.LOAD_GAME, onLoadGame);			this.titleScreen.removeEventListener(TinyGameEvent.QUIT_GAME, onQuitGame);		}				private function transitionOut(loadingGame : Boolean) : void		{			TinyLogManager.log('transitionOut', this);						// Fade out black			TweenLite.to(this.pixelGrad, 24, { delay:15, alpha:0, useFrames:true, ease:SteppedEase.create(5), onComplete:this.onTransitionOutComplete, onCompleteParams:[loadingGame] });			TinyMain.view.removeChild(this.titleScreen);						if (loadingGame) { 				this.fieldMap.visible = true;			} 		}				private function onTransitionOutComplete(loadingGame : Boolean) : void		{			TinyLogManager.log('onTransitionOutComplete', this);						if (loadingGame && TinyFieldMap.getInstance().startingEventName == '') {				// Give control to the player				TinyInputManager.getInstance().setTarget(TinyFriendSprite(TinyStatsEntity(player.party.party[0]).graphics));			} else if (!loadingGame) {				// Start the intro movie, after some suspense-building delay!				TweenLite.delayedCall(24, this.introMovie.play, null, true);			}			// Clean up			TinyMain.view.removeChild(this.pixelGrad);		}				public function showLoadGame() : void		{			TinyLogManager.log('showLoadGame', this);						// Show Load Menu			this.loadMenu = new TinySaveLoadMenu(false);			this.loadMenu.x = int((320 / 2) - (this.loadMenu.width / 2));			this.loadMenu.y = 40;			TinyMain.view.addChild(this.loadMenu);						// Give control			TinyInputManager.getInstance().setTarget(this.loadMenu);		}		public function onQuitGame(event : TinyGameEvent) : void 		{			TinyLogManager.log('onQuitGame', this);						// Quit after a delay			TinyInputManager.getInstance().setTarget(null);			TweenLite.delayedCall(5, fscommand, ['Quit'], true);		}				public static function getInstance() : TinyMain		{			return instance;		}	}}