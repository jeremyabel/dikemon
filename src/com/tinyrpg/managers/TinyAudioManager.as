package com.tinyrpg.managers {	import com.greensock.TweenLite;	import com.tinyrpg.core.TinyFieldMap;	import com.tinyrpg.media.sfx.SoundBattleStart;	import com.tinyrpg.media.sfx.SoundBuy;	import com.tinyrpg.media.sfx.SoundCancel;	import com.tinyrpg.media.sfx.SoundCursor;	import com.tinyrpg.media.sfx.SoundEnemyAttack;	import com.tinyrpg.media.sfx.SoundEnemyDie;	import com.tinyrpg.media.sfx.SoundErrorBuzz;	import com.tinyrpg.media.sfx.SoundFishAttack;	import com.tinyrpg.media.sfx.SoundHealA;	import com.tinyrpg.media.sfx.SoundHitA;	import com.tinyrpg.media.sfx.SoundImpossibleHit;	import com.tinyrpg.media.sfx.SoundMiss;	import com.tinyrpg.media.sfx.SoundRachelAttack;	import com.tinyrpg.media.sfx.SoundRecruit;	import com.tinyrpg.media.sfx.SoundRonAttack;	import com.tinyrpg.media.sfx.SoundSelect;	import com.tinyrpg.media.sfx.SoundText;	import com.tinyrpg.utils.TinyLogManager;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;//	import flash.filesystem.File;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	/**	 * @author jeremyabel	 */	public class TinyAudioManager extends EventDispatcher	{				private static var instance : TinyAudioManager = new TinyAudioManager;				// UI		public static var ERROR 	: Sound = new SoundErrorBuzz;		public static var TEXT		: Sound = new SoundText;		public static var CURSOR	: Sound = new SoundCursor;		public static var SELECT 	: Sound = new SoundSelect;		public static var CANCEL	: Sound = new SoundCancel;		public static var BUY		: Sound = new SoundBuy;		public static var PICKUP	: Sound = new SoundBuy;				// Misc 		public static var RECRUIT	: Sound = new SoundRecruit;		public static var FRIENDS   : Sound;// = new MusicFriendship;		public static var EXPLOSION : Sound = new SoundRecruit;				// Battle		public static var HEAL_A	   : Sound = new SoundHealA;		public static var HIT_A		   : Sound = new SoundHitA;		public static var MISS		   : Sound = new SoundMiss;		public static var IMPOSSIBLE   : Sound = new SoundImpossibleHit;		public static var BATTLE_START : Sound = new SoundBattleStart;		public static var ENEMY_DIE	   : Sound = new SoundEnemyDie;		public static var BOSS_DIE	   : Sound = new SoundRecruit;		public static var DIGI_HIT	   : Sound = new SoundRecruit;		public static var USE_ITEM     : Sound = new SoundRecruit;				// Character attacks		public static var FISH_ATTACK	: Sound = new SoundFishAttack;		public static var RON_ATTACK	: Sound = new SoundRonAttack;		public static var RACHEL_ATTACK : Sound = new SoundRachelAttack;		public static var ENEMY_ATTACK	: Sound = new SoundEnemyAttack;
		private var sfxChannel     : SoundChannel;		private var musicChannel   : SoundChannel;		private var musicTransform : SoundTransform;				public var musicAsaRiver : Sound;		public var musicBrainSlug : Sound;		public var musicCastle : Sound;		public var musicComputerFight : Sound; 		public var musicComputerRoom : Sound;		public var musicEvanTheme : Sound;		public var musicFair : Sound;		public var musicFight : Sound;		public var musicFinalBattle : Sound;		public var musicFishJam : Sound;		public var musicFishMuffled : Sound;		public var musicForest : Sound;		public var musicFriendship : Sound;		public var musicGlitchPath : Sound;		public var musicLounge : Sound;		public var musicMeganRoom : Sound;		public var musicRachelFarm : Sound;		public var musicRonBase : Sound;		public var musicSpaceMarine : Sound;		public var musicWeirdPlace : Sound;		public var INTRO : Sound;		public var VICTORY : Sound;		public var TITLE : Sound;				private var loadedClips : int = 0;		private var lastMusicPosition : Number = 0;				public var currentMusic : Sound;		public var nextMusic    : Sound;		public function TinyAudioManager() : void		{			this.sfxChannel	    = new SoundChannel();			this.musicChannel  = new SoundChannel();			this.musicTransform = new SoundTransform();			//			var dir : File = File.applicationDirectory;//			dir.resolvePath('Music');//			dir.resolvePath('AsaRiver.mp3');//						//			this.musicAsaRiver = new Sound();//			this.musicAsaRiver.load(new URLRequest('Music/AsaRiver.mp3'));//			this.musicAsaRiver.addEventListener(Event.COMPLETE, onSoundLoaded);		}		private function onError(event : IOErrorEvent) : void 		{			trace(event.text);		}		private function onSoundLoaded(event : Event) : void 		{			//event.currentTarget.removeEventListener(Event.COMPLETE, onSoundLoaded);			trace('loaded: ' + Sound(event.currentTarget).url);			this.loadedClips++;					switch (this.loadedClips) 			{				case 1:					this.musicBrainSlug = new Sound();					this.musicBrainSlug.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicBrainSlug.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicBrainSlug.load(new URLRequest('Music/BrainSlug.mp3'));					break;				case 2:					this.musicCastle = new Sound();					this.musicCastle.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicCastle.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicCastle.load(new URLRequest('Music/Castle.mp3'));					break;				case 3:					this.musicComputerFight = new Sound();					this.musicComputerFight.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicComputerFight.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicComputerFight.load(new URLRequest('Music/ComputerFight.mp3'));					break;				case 4:					this.musicComputerRoom = new Sound();					this.musicComputerRoom.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicComputerRoom.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicComputerRoom.load(new URLRequest('Music/ComputerRoom.mp3'));					break;				case 5:					this.musicEvanTheme = new Sound();					this.musicEvanTheme.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicEvanTheme.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicEvanTheme.load(new URLRequest('Music/EvanTheme.mp3'));					break;				case 6:					this.musicFair = new Sound();					this.musicFair.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicFair.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicFair.load(new URLRequest('Music/Fair.mp3'));					break;				case 7:					this.musicFight = new Sound();					this.musicFight.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicFight.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicFight.load(new URLRequest('Music/Fight.mp3'));				case 8:					this.musicFinalBattle = new Sound();					this.musicFinalBattle.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicFinalBattle.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicFinalBattle.load(new URLRequest('Music/FinalBattle.mp3'));					break;				case 9:					this.musicFishJam = new Sound();					this.musicFishJam.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicFishJam.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicFishJam.load(new URLRequest('Music/FishJam.mp3'));					break;				case 10:					this.musicFishMuffled = new Sound();					this.musicFishMuffled.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicFishMuffled.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicFishMuffled.load(new URLRequest('Music/FishMuffled.mp3'));					break;				case 11:					this.musicForest = new Sound();					this.musicForest.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicForest.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicForest.load(new URLRequest('Music/Forest.mp3'));					break;				case 12:					this.musicFriendship = new Sound();					this.musicFriendship.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicFriendship.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicFriendship.load(new URLRequest('Music/Friendship.mp3'));					break;				case 13:					this.musicGlitchPath = new Sound();					this.musicGlitchPath.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicGlitchPath.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicGlitchPath.load(new URLRequest('Music/GlitchPath.mp3'));					break;				case 14:					this.INTRO = new Sound();					this.INTRO.addEventListener(Event.COMPLETE, onSoundLoaded);					this.INTRO.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.INTRO.load(new URLRequest('Music/Intro.mp3'));					break;				case 15:					this.musicLounge = new Sound();					this.musicLounge.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicLounge.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicLounge.load(new URLRequest('Music/Lounge.mp3'));					break;				case 16:					this.musicMeganRoom = new Sound();					this.musicMeganRoom.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicMeganRoom.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicMeganRoom.load(new URLRequest('Music/MeganRoom.mp3'));					break;				case 17:					this.musicRachelFarm = new Sound();					this.musicRachelFarm.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicRachelFarm.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicRachelFarm.load(new URLRequest('Music/RachelFarm.mp3'));					break;				case 18:					this.musicRonBase = new Sound();					this.musicRonBase.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicRonBase.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicRonBase.load(new URLRequest('Music/RonBase.mp3'));					break;				case 19:					this.musicSpaceMarine = new Sound();					this.musicSpaceMarine.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicSpaceMarine.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicSpaceMarine.load(new URLRequest('Music/SpaceMarine.mp3'));					break;				case 20:					this.TITLE = new Sound();					this.TITLE.addEventListener(Event.COMPLETE, onSoundLoaded);					this.TITLE.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.TITLE.load(new URLRequest('Music/Title.mp3'));					break;				case 21:					this.VICTORY = new Sound();					this.VICTORY.addEventListener(Event.COMPLETE, onSoundLoaded);					this.VICTORY.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.VICTORY.load(new URLRequest('Music/Victory.mp3'));					break;				case 22:					this.musicWeirdPlace = new Sound();					this.musicWeirdPlace.addEventListener(Event.COMPLETE, onSoundLoaded);					this.musicWeirdPlace.addEventListener(IOErrorEvent.IO_ERROR, onError);					this.musicWeirdPlace.load(new URLRequest('Music/WeirdPlace.mp3'));					this.dispatchEvent(new Event(Event.COMPLETE));					break;			}		}		public static function play(targetSound : Sound) : void		{			//TinyLogManager.log('play, TinyAudioManager);			targetSound.play();		}				public function playMusic(song : Sound) : void		{			TinyLogManager.log('playMusic', this);						this.currentMusic = song;			this.musicChannel = song.play();			}				public function playInterruptMusic(song : Sound) : void		{			TinyLogManager.log('playInterruptMusic', this);						this.lastMusicPosition = this.musicChannel.position;						this.currentMusic = song;			this.musicChannel.stop();			this.musicChannel = song.play();			this.musicChannel.addEventListener(Event.SOUND_COMPLETE, resumeMapMusic);		}		public function resumeMapMusic(event : Event = null) : void 		{			TinyLogManager.log('resumeMapMusic', this);						var song : Sound = TinyAudioManager.getMusicByMapName(TinyFieldMap.mapName);			this.setSong(song, true);
		}
		public function stopMusic() : void		{			TinyLogManager.log('stopMusic', this);						this.musicChannel.stop();						this.musicChannel.removeEventListener(Event.SOUND_COMPLETE, onLoopMusic);		}		public function setSong(targetSong : Sound, fade : Boolean) : void		{			TinyLogManager.log('setSong: ' + targetSong.url, this);						this.nextMusic = targetSong;						if (this.currentMusic) {				this.musicChannel.removeEventListener(Event.SOUND_COMPLETE, onLoopMusic);								if (fade) {					TweenLite.to(this.musicTransform, 15, { volume:0, onUpdate:onUpdateChannel, onComplete:onNextSong, onCompleteParams:[fade], useFrames:true });				} else {					this.onNextSong(fade);								}			} else {				this.nextMusic = targetSong;				this.onNextSong(true);			}		}				private function onUpdateChannel() : void		{			this.musicChannel.soundTransform = this.musicTransform;		}				private function onNextSong(fade : Boolean) : void		{			this.musicChannel.stop();			this.currentMusic = this.nextMusic;			this.musicChannel = this.currentMusic.play(this.lastMusicPosition);			this.musicChannel.addEventListener(Event.SOUND_COMPLETE, onLoopMusic);			this.lastMusicPosition = 0;						if (fade) {				TweenLite.to(this.musicTransform, 15, { volume:1, onUpdate:onUpdateChannel, useFrames:true });			} else {				this.musicTransform.volume = 1;				this.musicChannel.soundTransform = this.musicTransform;			}		}				private function onLoopMusic(event : Event) : void		{			this.musicChannel = this.currentMusic.play();			this.musicChannel.addEventListener(Event.SOUND_COMPLETE, onLoopMusic);		}				public static function getMusicByEnemyName(enemyName : String) : Sound		{			TinyLogManager.log('getMusicByEnemyName: ' + enemyName, TinyAudioManager);						var soundFound : Sound;			switch (enemyName.toUpperCase()) 			{				case 'BRAIN SLUG':					soundFound = TinyAudioManager.getInstance().musicBrainSlug;					break;				case '"SPACE MARINE"':					soundFound = TinyAudioManager.getInstance().musicSpaceMarine;					break;				case 'COMPUTER':					soundFound = TinyAudioManager.getInstance().musicComputerFight;					break;				case 'DRUNK EVAN':					soundFound = TinyAudioManager.getInstance().musicWeirdPlace;					break;				case 'DARK EVAN':					soundFound = TinyAudioManager.getInstance().musicFinalBattle;					break; 				default: 					soundFound = TinyAudioManager.getInstance().musicFight;					break;			}			return soundFound;		}				public static function getMusicByMapName(mapName : String) : Sound		{			TinyLogManager.log('getMusicByMapName: ' + mapName, TinyAudioManager.getInstance());						var soundFound : Sound;			switch (mapName.toUpperCase()) 			{				case 'MAP_ANDY_ENTRANCE':					soundFound = TinyAudioManager.getInstance().musicGlitchPath;					break;				case 'MAP_ANDY_ROOM':					soundFound = TinyAudioManager.getInstance().musicLounge;					break;				case 'MAP_ASA_RIVER':					soundFound = TinyAudioManager.getInstance().musicAsaRiver;					break;				case 'MAP_CASTLE_ENTRANCE':					soundFound = TinyAudioManager.getInstance().musicCastle;					break;				case 'MAP_COMPUTER_ROOM':					soundFound = TinyAudioManager.getInstance().musicComputerRoom;					break;				case 'MAP_FISH_PRE_ANTECHAMBER':					soundFound = TinyAudioManager.getInstance().musicFishMuffled;					break;				case 'MAP_FISH_ANTECHAMBER':					soundFound = TinyAudioManager.getInstance().musicFishMuffled;					break;				case 'MAP_FISH_CHAMBER':					soundFound = TinyAudioManager.getInstance().musicFishJam;					break;				case 'MAP_FAIR':					soundFound = TinyAudioManager.getInstance().musicFair;					break;				case 'MAP_FAIR_ENTRANCE':					soundFound = TinyAudioManager.getInstance().musicFair;					break;				case 'MAP_FOREST':					soundFound = TinyAudioManager.getInstance().musicForest;					break;				case 'MAP_LOUNGE':					soundFound = TinyAudioManager.getInstance().musicLounge;					break;				case 'MAP_MEGAN_ROOM':					soundFound = TinyAudioManager.getInstance().musicMeganRoom;					break;				case 'MAP_RACHEL_FARM':					soundFound = TinyAudioManager.getInstance().musicRachelFarm;					break;				case 'MAP_RALPH_RED_ROOM':					soundFound = TinyAudioManager.getInstance().musicWeirdPlace;					break;				case 'MAP_RON_BASE':					soundFound = TinyAudioManager.getInstance().musicRonBase;					break;				case 'MAP_WEIRD_PLACE':					soundFound = TinyAudioManager.getInstance().musicWeirdPlace;					break;			}			return soundFound;		}				public static function getSoundByName(soundName : String) : Sound		{			TinyLogManager.log('getSoundByName: ' + soundName, TinyAudioManager);						var soundFound : Sound;			switch (soundName) 			{				case 'ERROR':					soundFound = TinyAudioManager.ERROR;					break;				case 'TEXT':					soundFound = TinyAudioManager.TEXT;					break;				case 'SELECT':					soundFound = TinyAudioManager.SELECT;					break;				case 'PICKUP':					soundFound = TinyAudioManager.PICKUP;					break;				case 'EXPLOSION':					soundFound = TinyAudioManager.EXPLOSION;					break;				case 'BOSS DEATH':					soundFound = TinyAudioManager.BOSS_DIE;					break;				case 'HEAL':					soundFound = TinyAudioManager.HEAL_A;					break;			}			return soundFound;		}				public function getMusicByName(musicName : String) : Sound		{			TinyLogManager.log('getMusicByName: ' + musicName, this);						var musicFound : Sound;			switch (musicName.toUpperCase()) 			{				case 'EVAN THEME':					musicFound = this.musicEvanTheme; break;				case 'VICTORY':					musicFound = this.VICTORY; break;				case 'TITLE':					musicFound = this.TITLE; break;				case 'FRIENDSHIP':					musicFound = this.musicFriendship; break;			}			return musicFound;		}				public static function getAttackSoundByName(playerName : String) : Sound		{			TinyLogManager.log('getAttackSoundByName: ' + playerName, TinyAudioManager);						var soundFound : Sound;			switch (playerName.toUpperCase()) 			{				case 'ASA':				case 'ANDY':				case 'EVAN':				case 'EVAN?':				case 'RALPH':					soundFound = TinyAudioManager.ENEMY_ATTACK; break;				case 'FISH':					soundFound = TinyAudioManager.FISH_ATTACK;	break;				case 'JASON':				case 'RACHEL':					soundFound = TinyAudioManager.RACHEL_ATTACK;	break;				case 'MEGAN':				case 'RON':					soundFound = TinyAudioManager.RON_ATTACK;		break;				default:					soundFound = TinyAudioManager.ENEMY_ATTACK;		break;			}			return soundFound;		}				public static function getInstance() : TinyAudioManager		{			return instance;		}	}}