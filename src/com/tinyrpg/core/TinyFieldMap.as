package com.tinyrpg.core {		import com.coreyoneil.collision.CollisionGroup;	import com.tinyrpg.data.TinyCollisionData;	import com.tinyrpg.display.TinyMapMovieClip;	import com.tinyrpg.events.TinyFieldMapEvent;	import com.tinyrpg.managers.TinyMapManager;	import com.tinyrpg.misc.TinyMapConfig;	import com.tinyrpg.utils.TinyLogManager;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	/**	 * @author jeremyabel	 */	public class TinyFieldMap extends Sprite 	{		public static const COLLISION_TYPE_WALLS	: String = 'WALLS';		public static const COLLISION_TYPE_OBJECTS	: String = 'OBJECTS'; 				public var mapName					: String;		public var mapUserObjects			: Sprite;		public var startingEventName		: String;		private var mapMovieClip			: TinyMapMovieClip;		private var currentEventSequence	: TinyEventSequence;		private var eventXML 				: XML;		private var mapObjects				: MovieClip;		private var mapBase					: MovieClip;		private var mapHit					: MovieClip;		private var collisionWalls 			: CollisionGroup;		private var collisionObjects		: CollisionGroup;		public function TinyFieldMap( mapName : String ) : void		{			this.mapName = mapName;			this.mapMovieClip = TinyMapConfig.getMapFromName( this.mapName );			this.mapBase = this.mapMovieClip.map;			this.mapHit = this.mapMovieClip.hit;			this.mapHit.visible = false;						this.mapObjects = this.mapMovieClip.objects;			this.mapUserObjects = new Sprite();						// Collision groups			this.collisionWalls = new CollisionGroup( this.mapHit );			this.collisionObjects = new CollisionGroup();						// Add each map object to the objects collision group			for ( var i : uint = 0; i < this.mapObjects.numChildren; i++ )			{				var mapObject : DisplayObject = this.mapObjects.getChildAt( i );				this.addToCollisionGroup( mapObject, COLLISION_TYPE_OBJECTS );			}						// Get event sequence XML data			this.eventXML = TinyMapConfig.getMapEventXMLFromName( mapName );						// Add 'em up			this.addChild( this.mapBase );			this.addChild( this.mapHit );			this.addChild( this.mapObjects );			this.addChild( this.mapUserObjects );		}				public function addToCollisionGroup( object : DisplayObject, type : String = COLLISION_TYPE_WALLS ) : void		{			switch ( type ) 			{				default:				case COLLISION_TYPE_WALLS:					this.collisionWalls.addItem( object );					break;								case COLLISION_TYPE_OBJECTS:					this.collisionObjects.addItem( object );					break;			}		}				public function checkWallCollision( object : DisplayObject ) : TinyCollisionData		{				return this.collisionWalls.checkCollision( object );		}				public function checkObjectCollision( object : DisplayObject ) : TinyCollisionData		{				return this.collisionObjects.checkCollision( object );		}				public function getMapObjectByName( objectName : String ) : DisplayObject		{			return this.mapObjects.getChildByName( objectName );		}		public function startEventByName( eventName : String ) : void		{			TinyLogManager.log( 'startEventByName: ' + eventName, this );						// Create and start the new event sequence			this.currentEventSequence = TinyEventSequence.newFromEventName( this.eventXML, eventName );			this.currentEventSequence.addEventListener( Event.COMPLETE, this.onEventSequenceComplete );			this.currentEventSequence.startSequence();						// Add the sequence to the map manager's event container sprite			TinyMapManager.getInstance().mapEventContainer.addChild( this.currentEventSequence );		}		private function onEventSequenceComplete( event : Event ) : void 		{			TinyLogManager.log( 'onEventSequenceComplete', this );						// Remove the sequence from the map manager's event container sprite			TinyMapManager.getInstance().mapEventContainer.removeChild( this.currentEventSequence );						// Clean up			this.currentEventSequence.removeEventListener( Event.COMPLETE, this.onEventSequenceComplete );			this.currentEventSequence = null;						// Alert the map manager that the event is complete			this.dispatchEvent( new TinyFieldMapEvent( TinyFieldMapEvent.EVENT_COMPLETE ) );		}		//		public static function getNPCSpriteByName(targetName : String) : TinyFriendSprite//		{//			TinyLogManager.log('getNPCSpriteByName: ' + targetName, TinyFieldMap);//			//			// Find function//			var findFunction : Function = function(item : *, index : int, array : Array) : Boolean//				{ index; array; return (TinyFriendSprite(item).charName.toUpperCase() == targetName.toUpperCase()); };//			//			// Search for character//			return TinyFieldMap.npcArray.filter(findFunction)[0];//		}			}}