package com.tinyrpg.debug {	import com.tinyrpg.core.TinyMon;	import com.tinyrpg.core.TinyBattle;	import com.tinyrpg.battle.TinyBattle;	import com.tinyrpg.core.TinyItem;	import com.tinyrpg.core.TinyStatsEntity;	import com.tinyrpg.core.TinyTrainer;	import com.tinyrpg.data.TinyAppSettings;	import com.tinyrpg.data.TinyMoveDataList;	import com.tinyrpg.managers.TinyFontManager;	import com.tinyrpg.managers.TinyInputManager;	import com.tinyrpg.misc.TinyCSS;	import com.tinyrpg.misc.TinySpriteConfig;	import com.tinyrpg.data.TinyItemDataList;	import com.tinyrpg.utils.TinyMath;	import com.tinyrpg.utils.TinyLogManager;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.utils.ByteArray;	/**	 * @author jeremyabel	 */	public class TinyBattleTester extends MovieClip	{		[Embed(source='../../../../bin/xml/Characters.xml', mimeType='application/octet-stream')]		public static const Character_Test : Class;		[Embed(source='../../../../bin/xml/Enemy_Test.xml', mimeType='application/octet-stream')]		public static const Enemy_Test : Class;		[Embed(source='../../../../bin/xml/Items.xml', mimeType='application/octet-stream')]		public static const Item_Test : Class;				[Embed(source='../../../../bin/xml/StartingSave.xml', mimeType='application/octet-stream')]		public static const Starting_Save : Class;				[Embed(source='../../../../bin/xml/Monsters.xml', mimeType='application/octet-stream')]		public static const Monsters : Class;				public var testBattle : TinyBattle;		public function TinyBattleTester() : void		{			var doWildEncounter : Boolean = true;						var appSettings : TinyAppSettings = new TinyAppSettings(stage);			var inputManager : TinyInputManager = TinyInputManager.getInstance();						// Init font manager			var tinyCSS : TinyCSS = new TinyCSS();			TinyFontManager.initWithCSS(TinyCSS.cssString);						var moveData : TinyMoveDataList = TinyMoveDataList.getInstance();							// Get monster data			var byteArray : ByteArray = (new TinyBattleTester.Monsters()) as ByteArray;			var string : String = byteArray.readUTFBytes(byteArray.length);			var monsterXMLData : XML = new XML(string);						var playerTrainer : TinyTrainer = new TinyTrainer(TinySpriteConfig.getTrainerSprite('Player'), 'Player');			var enemyTrainer : TinyTrainer = new TinyTrainer(TinySpriteConfig.getTrainerSprite('Player'), 'Enemy Guy');						playerTrainer.squad.push(new TinyMon(monsterXMLData.children()[25]));			playerTrainer.squad.push(new TinyMon(monsterXMLData.children()[24]));			playerTrainer.squad.push(new TinyMon(monsterXMLData.children()[23]));						var wildMonster : TinyMon = new TinyMon(monsterXMLData.children()[23]);			//			enemyTrainer.squad.push(new TinyMon(monsterXMLData.children()[23]));//			enemyTrainer.squad.push(new TinyMon(monsterXMLData.children()[22]));//			enemyTrainer.squad.push(new TinyMon(monsterXMLData.children()[23]));						var item1 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'OKFeels™ Spray' );			var item2 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'GoodFeels™ Spray' );			var item3 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'GreatFeels™ Spray' );			var item4 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'BestFeels™ Spray' );			var item5 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Life Cake' );			var item6 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'GoAway™ Spray' );			var item7 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Fight Juice' );			var item8 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Mega Fight Juice' );			var item9 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Barf Fix' );			var item10 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Unsticky Goop' );			var item11 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Cool Jelly' );			var item12 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Big Noise Box' );			var item13 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Dikéball' );			var item14 : TinyItem = TinyItemDataList.getInstance().getItemByName( 'Dikéball 2.0' );						playerTrainer.addItem( item1 );			playerTrainer.addItem( item2 );			playerTrainer.addItem( item3 );			playerTrainer.addItem( item4 );			playerTrainer.addItem( item5 );			playerTrainer.addItem( item6 );			playerTrainer.addItem( item7 );			playerTrainer.addItem( item8 );			playerTrainer.addItem( item9 );			playerTrainer.addItem( item10 );			playerTrainer.addItem( item11 );			playerTrainer.addItem( item12 );			playerTrainer.addItem( item13 );			playerTrainer.addItem( item14 );						var enemyMon : TinyMon = enemyTrainer.squad[0] as TinyMon;			var trainerMon : TinyMon = playerTrainer.squad[0] as TinyMon;			//			trainerMon.isBurned = true;//			trainerMon.isPoisoned = true;//			trainerMon.isParaylzed = true;			//			enemyMon.isBurned = true;//			enemyMon.isFlinching = true;//			enemyMon.isMeanLooked = true;//			enemyMon.isParaylzed = true;//			enemyMon.isPoisoned = true;//			trainerMon.isBurned = true;//			enemyMon.setConfusionCounter();//			enemyMon.setSleepCounter();						// Create test battle			if (doWildEncounter)			{				testBattle = new TinyBattle(playerTrainer, wildMonster);				}			else 			{				testBattle = new TinyBattle(playerTrainer, null, enemyTrainer);			}						// Resize to fit the screen			var scaleFactor : Number = stage.stageHeight / 144;			TinyAppSettings.SCALE_FACTOR = scaleFactor;			testBattle.scaleX *= scaleFactor;			testBattle.scaleY *= scaleFactor;			testBattle.startBattle();			this.addChild(testBattle);		}	}}