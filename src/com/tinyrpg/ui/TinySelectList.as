package com.tinyrpg.ui {	import com.greensock.plugins.RoundPropsPlugin;	import com.greensock.plugins.TweenPlugin;	import com.tinyrpg.display.TinySelectableItem;	import com.tinyrpg.display.TinyContentBox;	import com.tinyrpg.events.TinyInputEvent;	import com.tinyrpg.managers.TinyAudioManager;	import com.tinyrpg.managers.TinyInputManager;	import com.tinyrpg.utils.TinyLogManager;	import com.tinyrpg.utils.TinyMath;	import flash.display.Sprite;	/**	 * @author jeremyabel	 */	public class TinySelectList extends TinyContentBox 	{ 		protected var itemHolder : Sprite;		protected var itemArray  : Array = [];				public var selectedItem  : TinySelectableItem;		public var muteAudio	 : Boolean = false;		public var isCancellable : Boolean = true;				protected var spacing 	 	: uint;		protected var startingX 	: uint;		protected var startingY 	: uint;		protected var horizontal	: Boolean;		protected var horizSpacing 	: int;		protected var itemCounter  	: int = 0;		protected var buttonSide	: Boolean = false;				public function TinySelectList( newItemArray : Array = null, width : uint = 0, height : uint = 0, spacing : uint = 15, startingY : int = 6, startingX : int = 0, horizontal : Boolean = false, horizontalSpacing : int = 20, opaque : Boolean = false)		{			TweenPlugin.activate([RoundPropsPlugin]);						// Set properties			this.spacing = spacing;			this.startingX = startingX;			this.startingY = startingY;			this.horizontal = horizontal;			this.horizSpacing = horizontalSpacing;			this.itemHolder = new Sprite;						this.itemHolder.x = -3;			this.itemHolder.y = -6;						super(null, width, height, opaque);						// Add any items we have			var itemCount : int = 0;			if (newItemArray) {				for each (var item : TinySelectableItem in newItemArray) {					item.x = this.startingX;					if (this.horizontal && itemCount % 2 != 0) item.x += horizontalSpacing;					this.addListItem(item);					itemCount++;				}			}						// Add 'em up			this.addChild(this.itemHolder);						// Add events			this.addEventListener(TinyInputEvent.CONTROL_ADDED, onControlAdded);		}		public function addListItem(item : TinySelectableItem) : void		{			TinyLogManager.log('addListItem: ' + item.textString, this);			this.itemArray.push(item);						if (!this.horizontal) {				item.y = this.startingY + (this.itemArray.length - 1) * this.spacing;			} else if (this.horizontal && this.itemCounter % 2 == 0) {				item.y = this.startingY + (int(this.itemCounter / 2) * this.spacing);			} else if (this.horizontal) {				item.y = TinySelectableItem(this.itemArray[this.itemArray.length - 2]).y;			}						this.itemCounter++;			this.itemHolder.addChild(item);		}				public function removeListItem(targetItem : TinySelectableItem) : void		{			TinyLogManager.log('removeListItem: ' + targetItem.textString, this);						// Remove item			var index : int = this.itemArray.indexOf(targetItem);			this.itemArray.splice(index, 1);			this.itemHolder.removeChild(targetItem);			this.selectedItem = null;						// Reposition items			var i : int = 0;			if (!this.horizontal) {				for each (var item : TinySelectableItem in this.itemArray) 				{					item.y = this.startingY + i * this.spacing;					item.selectID = i;					i++;				}			}		}				public function resetListItems( newItemArray : Array ) : void		{			while (this.itemArray.length > 0) 			{				var itemToRemove : TinySelectableItem = this.itemArray.shift() as TinySelectableItem;			 	this.itemHolder.removeChild(itemToRemove);			 	this.selectedItem = null;			}						// Add any items we have			var itemCount : int = 0;			if (newItemArray) 			{				for each (var item : TinySelectableItem in newItemArray) 				{					item.x = this.startingX;					if (this.horizontal && itemCount % 2 != 0) item.x += this.horizSpacing;					this.addListItem(item);					itemCount++;				}			}		}				public function get length() : int		{			return this.itemArray.length;		}		public function clearSelectedItem() : void		{			TinyLogManager.log('clearSelectedItem', this);			if ( this.selectedItem ) 			{				this.selectedItem.selected = false;			}		}				public function setStickySelection() : void		{			TinyLogManager.log( 'setStickySelection', this );						if ( this.selectedItem ) 			{				this.selectedItem.autoSelected = true;			}		}				public function clearStickySelection() : void		{			TinyLogManager.log( 'clearStickySelection', this );						if ( this.selectedItem ) 			{				this.selectedItem.autoSelected = false;			}		}				public function setSelectedItemIndex( index : int ) : void		{			TinyLogManager.log('setSelectedItemIndex: ' + index, this);						if ( this.selectedItem ) this.selectedItem.selected = false;			this.selectedItem = this.itemArray[index];			this.selectedItem.selected = true;						this.dispatchEvent( new TinyInputEvent( TinyInputEvent.SELECTED ) );		}				public function show() : void		{			TinyLogManager.log( 'show', this );			this.visible = true;		}		public function hide() : void		{			TinyLogManager.log( 'hide', this );			this.visible = false; 		}		protected function onControlAdded(e : TinyInputEvent) : void		{			TinyLogManager.log('onControlAdded', this);						// Restore selected state, if possible			if ( this.selectedItem ) 			{				this.selectedItem.selected = true;			}						// Only select first item the first time			if ( !this.selectedItem ) 			{ 				this.setSelectedItemIndex( 0 );			}						// Add events			if (!this.horizontal) {				TinyInputManager.getInstance().addEventListener(TinyInputEvent.ARROW_UP, onArrowUp);				TinyInputManager.getInstance().addEventListener(TinyInputEvent.ARROW_DOWN, onArrowDown);			} else {				TinyInputManager.getInstance().addEventListener(TinyInputEvent.ARROW_UP, onArrowUp);				TinyInputManager.getInstance().addEventListener(TinyInputEvent.ARROW_DOWN, onArrowDown);				TinyInputManager.getInstance().addEventListener(TinyInputEvent.ARROW_LEFT, onArrowLeft);				TinyInputManager.getInstance().addEventListener(TinyInputEvent.ARROW_RIGHT, onArrowRight);			}						TinyInputManager.getInstance().addEventListener(TinyInputEvent.ACCEPT, onAccept);			TinyInputManager.getInstance().addEventListener(TinyInputEvent.CANCEL, onCancel);			this.addEventListener(TinyInputEvent.CONTROL_REMOVED, onControlRemoved);			this.removeEventListener(TinyInputEvent.CONTROL_ADDED, onControlAdded);		}		protected function onControlRemoved(e : TinyInputEvent) : void		{			TinyLogManager.log('onControlRemoved', this);						// Remove selection			this.clearSelectedItem();						// Remove events			if (!this.horizontal) {				TinyInputManager.getInstance().removeEventListener(TinyInputEvent.ARROW_UP, onArrowUp);				TinyInputManager.getInstance().removeEventListener(TinyInputEvent.ARROW_DOWN, onArrowDown);			} else {				TinyInputManager.getInstance().removeEventListener(TinyInputEvent.ARROW_UP, onArrowUp);				TinyInputManager.getInstance().removeEventListener(TinyInputEvent.ARROW_DOWN, onArrowDown);				TinyInputManager.getInstance().removeEventListener(TinyInputEvent.ARROW_LEFT, onArrowLeft);				TinyInputManager.getInstance().removeEventListener(TinyInputEvent.ARROW_RIGHT, onArrowRight);			}						TinyInputManager.getInstance().removeEventListener(TinyInputEvent.ACCEPT, onAccept);			TinyInputManager.getInstance().removeEventListener(TinyInputEvent.CANCEL, onCancel);			this.removeEventListener(TinyInputEvent.CONTROL_REMOVED, onControlRemoved);			this.addEventListener(TinyInputEvent.CONTROL_ADDED, onControlAdded);		}		protected function onArrowUp(event : TinyInputEvent) : void 		{				var oldSelectID : int = TinyMath.deepCopyInt( this.selectedItem.selectID );			// Try is used to prevent errors if there are no items in the list			try 			{							if (oldSelectID == 0 && !this.horizontal) {					this.setSelectedItemIndex( this.itemArray.length - 1 );				} else if (oldSelectID == 0 && this.horizontal) {					this.setSelectedItemIndex( this.itemArray.length - 2 );				} else if (this.horizontal && event) {					this.setSelectedItemIndex( (oldSelectID - 2) % this.itemArray.length );				} else {										this.setSelectedItemIndex( (oldSelectID - 1) % this.itemArray.length );				}			} 			catch ( error : Error ) { }						if ( this.selectedItem == null ) 			{				this.setSelectedItemIndex( 0 );			}						// Play sound			if (!this.muteAudio) 			{				TinyAudioManager.play(TinyAudioManager.CURSOR);			}						TinyLogManager.log('onKeyDown: UP   Selected Item: ' + this.selectedItem.textString, this);		}				protected function onArrowDown(event : TinyInputEvent) : void 
		{			// Try is used to prevent errors if there are no items in the list			try 			{				var oldSelectID : int = this.selectedItem.selectID;								if (this.horizontal && event) {					this.setSelectedItemIndex( (oldSelectID + 2) % this.itemArray.length );				} else {					this.setSelectedItemIndex( (oldSelectID + 1) % this.itemArray.length );				}			} 			catch ( error : Error ) { }						if ( this.selectedItem == null ) 			{				this.setSelectedItemIndex( 0 );			}						// Play sound			if (!this.muteAudio)			{				TinyAudioManager.play(TinyAudioManager.CURSOR);			}						TinyLogManager.log('onKeyDown: DOWN   Selected Item: ' + this.selectedItem.textString, this);		}				protected function onArrowLeft(event : TinyInputEvent) : void 		{			TinyLogManager.log('onArrowLeft', this);			this.buttonSide = true;			this.onArrowUp(null);		}
		protected function onArrowRight(event : TinyInputEvent) : void 		{
			TinyLogManager.log('onArrowRight', this);			this.buttonSide = true;			this.onArrowDown(null);
		}				protected function onAccept(event : TinyInputEvent) : void 		{						if ( !TinyInputManager.getInstance().holdingAccept ) 			{				TinyLogManager.log('onAccept', this);				this.dispatchEvent(new TinyInputEvent(TinyInputEvent.ACCEPT));				TinyInputManager.getInstance().holdingAccept = true;								// Play sound				TinyAudioManager.play(TinyAudioManager.SELECT);			}		}		protected function onCancel(event : TinyInputEvent) : void 		{			if ( this.isCancellable )			{				TinyLogManager.log('onCancel', this);				this.dispatchEvent(new TinyInputEvent(TinyInputEvent.CANCEL));								// Play sound				TinyAudioManager.play(TinyAudioManager.CANCEL);			}			else			{				TinyLogManager.log('onCancel - nope, cannot cancel this element', this);								// Play sound				TinyAudioManager.play(TinyAudioManager.ERROR);				}		}	}}