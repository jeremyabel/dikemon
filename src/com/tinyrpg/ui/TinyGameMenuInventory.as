package com.tinyrpg.ui {	import com.tinyrpg.core.TinyItem;	import com.tinyrpg.core.TinyPlayer;	import com.tinyrpg.data.TinyItemDataList;	import com.tinyrpg.display.TinySelectableItem;	import com.tinyrpg.events.TinyBattleEvent;	import com.tinyrpg.events.TinyInputEvent;	import com.tinyrpg.events.TinyItemEvent;	import com.tinyrpg.managers.TinyInputManager;	import com.tinyrpg.utils.TinyLogManager;	import flash.geom.Point;	/**	 * @author jeremyabel	 */	public class TinyGameMenuInventory extends TinySelectList 	{		public static var TOSS_ITEM_POSITION : Point = new Point(0, 0);				private var useDropMenu : TinyUseDropMenu;		private var itemDisposal : Boolean;				public function TinyGameMenuInventory(itemDisposal : Boolean = false) : void		{			this.itemDisposal = itemDisposal;						var newItemArray : Array = [];						// Add items			var i : int = 0;			for each (var item : TinyItem in TinyPlayer.getInstance().inventory.inventory)			{				var newLabel : TinySelectableItem = new TinySelectableItem(item.name, item.itemID);				newLabel.selectID = i;				newItemArray.push(newLabel);				i++;			}						super('Items', newItemArray, 109, 114, 10, 4, 0);						this.useDropMenu = new TinyUseDropMenu;			this.useDropMenu.x = 7;			this.addChild(this.useDropMenu);						this.visible = false;		}				public function removeItem(targetItem : TinyItem) : void		{			TinyLogManager.log('removeItem: ' + targetItem.name, this);						var targetLabel : TinySelectableItem = this.getItemByID(targetItem.itemID);			this.removeListItem(targetLabel);		}		public function show() : void		{			TinyLogManager.log('show', this);			this.visible = true;		}		public function hide() : void		{			TinyLogManager.log('hide', this);			this.visible = false;		}				override protected function onControlAdded(e : TinyInputEvent) : void		{			super.onControlAdded(e);						// Update helper box			if (this.itemArray.length > 0) {				var itemText : String = TinyItemDataList.getInstance().getItemByName(this.selectedItem.textString).description;				try { TinyGameMenu.menuOneLiner.text = itemText; } catch (error : Error) { }			}		}		override protected function onControlRemoved(e : TinyInputEvent) : void		{			super.onControlRemoved(e);						// Empty helper box 			try { TinyGameMenu.menuOneLiner.text = ''; } catch (error : Error) { }		}		override protected function onArrowUp(e : TinyInputEvent) : void		{			if (this.itemArray.length > 0) {				super.onArrowUp(e);								// Update helper box				//var itemText : String = TinyPlayer.getInstance().inventory.getItemByID(this.selectedItem.idNumber).description;				var itemText : String = TinyItemDataList.getInstance().getItemByName(this.selectedItem.textString).description;				try { TinyGameMenu.menuOneLiner.text = itemText; } catch (error : Error) { }			}		}				override protected function onArrowDown(e : TinyInputEvent) : void		{			if (this.itemArray.length > 0) {				super.onArrowDown(e);								// Update helper box							//var itemText : String = TinyPlayer.getInstance().inventory.getItemByID(this.selectedItem.idNumber).description;				var itemText : String = TinyItemDataList.getInstance().getItemByName(this.selectedItem.textString).description;				try { TinyGameMenu.menuOneLiner.text = itemText; } catch (error : Error) { }			}		}				override protected function onAccept(e : TinyInputEvent) : void		{			if (this.itemArray.length > 0) {				super.onAccept(e);								if (this.itemDisposal) {					this.onUseSelected(null);				} 				else {					// Show use / drop box					this.useDropMenu.clearSelectedItem();					TinyInputManager.getInstance().setTarget(this.useDropMenu);					this.useDropMenu.y = this.selectedItem.y + this.selectedItem.height + 1;					this.useDropMenu.show();										// Events					this.useDropMenu.addEventListener(TinyInputEvent.CANCEL, onUseDropCancel);					this.useDropMenu.addEventListener(TinyItemEvent.ITEM_USED, onUseSelected);					this.useDropMenu.addEventListener(TinyItemEvent.ITEM_DROPPED, onDropSelected);				}			}		}		private function onUseDropCancel(event : TinyInputEvent) : void 		{			TinyLogManager.log('onUseDropCancel', this);						// Give control back			TinyInputManager.getInstance().setTarget(this);						// Clean up			this.useDropMenu.hide();			this.useDropMenu.removeEventListener(TinyInputEvent.CANCEL, onUseDropCancel);			this.useDropMenu.removeEventListener(TinyItemEvent.ITEM_USED, onUseSelected);			this.useDropMenu.removeEventListener(TinyItemEvent.ITEM_DROPPED, onDropSelected);		}		private function onUseSelected(event : TinyItemEvent) : void		{			TinyLogManager.log('onUseSelected', this);						// Tell the others!			var selectedItem : TinyItem = TinyItemDataList.getInstance().getItemByName(this.selectedItem.textString);			this.dispatchEvent(new TinyBattleEvent(TinyBattleEvent.ITEM_USED, null, selectedItem));						// Clean up			if (!this.itemDisposal) {				this.useDropMenu.hide();				this.useDropMenu.removeEventListener(TinyInputEvent.CANCEL, onUseDropCancel);				this.useDropMenu.removeEventListener(TinyItemEvent.ITEM_USED, onUseSelected);				this.useDropMenu.removeEventListener(TinyItemEvent.ITEM_DROPPED, onDropSelected);			}		}				private function onDropSelected(event : TinyItemEvent) : void		{			TinyLogManager.log('onDropSelected', this);						// Drop item			TinyGameMenu.menuOneLiner.text = 'You dropped a ' + this.selectedItem.textString;			var selectedItem : TinyItem = TinyItemDataList.getInstance().getItemByName(this.selectedItem.textString);			this.removeItem(selectedItem);			TinyPlayer.getInstance().inventory.removeItem(selectedItem);						// Return control			TinyInputManager.getInstance().setTarget(this);						// Clean up			this.useDropMenu.hide();			this.useDropMenu.removeEventListener(TinyInputEvent.CANCEL, onUseDropCancel);			this.useDropMenu.removeEventListener(TinyItemEvent.ITEM_USED, onUseSelected);			this.useDropMenu.removeEventListener(TinyItemEvent.ITEM_DROPPED, onDropSelected);		}				private function getItemByID(targetID : int) : TinySelectableItem		{			// Find function			var findFunction : Function = function(item : *, index : int, array : Array) : Boolean				{ index; array; return (TinySelectableItem(item).idNumber == targetID); };						// Search for character			return this.itemArray.filter(findFunction)[0];		}	}}