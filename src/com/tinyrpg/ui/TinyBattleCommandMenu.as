package com.tinyrpg.ui {	import com.tinyrpg.display.IShowHideObject;	import com.tinyrpg.display.TinySelectableItem;	import com.tinyrpg.events.TinyBattleEvent;	import com.tinyrpg.events.TinyInputEvent;	import com.tinyrpg.managers.TinyAudioManager;	import com.tinyrpg.utils.TinyLogManager;	/**	 * Class which handles the UI for the main battle menu.	 * 	 * @author jeremyabel	 */	public class TinyBattleCommandMenu extends TinySelectList implements IShowHideObject	{		private var fightString 	: String = 'FIGHT';		private var switchString 	: String = 'DM';		private var itemString		: String = 'ITEM';		private var runString		: String = 'RUN';				public function TinyBattleCommandMenu()		{			var newItems : Array = [];			newItems[0] = new TinySelectableItem(this.fightString, 0);			newItems[1] = new TinySelectableItem(this.switchString, 1, 'battleSwitchCommand', 0, 3);			newItems[2] = new TinySelectableItem(this.itemString, 2);			newItems[3] = new TinySelectableItem(this.runString, 3);						super( newItems, 72, 33, 15, 5, 3, true, 38 );		}				/**		 * Hides the contents of the selection list.		 */		public function hideBattleCommands() : void		{			TinyLogManager.log( 'hideBattleCommands', this );						for each ( var item : TinySelectableItem in this.itemArray ) 			{				item.visible = false;			}		}				/**		 * Shows the contents of the selection list.		 */		public function showBattleCommands() : void 		{			TinyLogManager.log( 'showBattleCommands', this );						for each ( var item : TinySelectableItem in this.itemArray ) 			{				item.visible = true;			}		}		override protected function onAccept(event : TinyInputEvent) : void 		{						// Play sound			TinyAudioManager.play( TinyAudioManager.SELECT );						switch ( this.selectedItem.textString ) 			{				case this.fightString:					TinyLogManager.log('onAccept: ' + this.fightString, this);					this.dispatchEvent( new TinyBattleEvent( TinyBattleEvent.FIGHT_SELECTED ) );					break;				case this.switchString:					TinyLogManager.log('onAccept: ' + this.switchString, this);					this.dispatchEvent( new TinyBattleEvent( TinyBattleEvent.SWITCH_SELECTED ) );					break;				case this.itemString:					TinyLogManager.log('onAccept: ' + this.itemString, this);					this.dispatchEvent( new TinyBattleEvent( TinyBattleEvent.ITEM_SELECTED ) );					break;				case this.runString:					TinyLogManager.log('onAccept: ' + this.runString, this);					this.dispatchEvent( new TinyBattleEvent( TinyBattleEvent.RUN_SELECTED ) );					break;			}		}	}}